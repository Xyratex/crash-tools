//  -*- Mode: C -*-
// Copyright 2006 Cray Inc. All Rights Reserved.
//
#define EX_SYSCALL      1
#define EX_BREAK        2
#define EX_GRADTIMEOUT  6
#define EX_ADDRESS      9       /* misaligned, privileged, or illegal VA */
#define EX_SYNC         11      /* gsync/msync with bad mask */
#define EX_WATCHPOINT   12
#define EX_REGISTER     14      /* register number conflict */
#define EX_RESPONSE     16      /* memory response error */
#define EX_FLOATING     17      /* floating-point error, see FPSR */
#define EX_UNDEFINED    18      /* undefined behavior */
#define EX_SMODIFY      19      /* scalar store to unwritable page */
#define EX_VMODIFY      20      /* vector store to unwritable page */
#define EX_VECTOR       24      /* attempt to access vector state */
#define EX_BADINST      25      /* undefined opcode */
#define EX_NMI          33
#define EX_HARDWARE     34
#define EX_NOPAGE       36      /* page miss */
#define EX_FAULTX       37      /* page not executable */
#define EX_FAULTR       38      /* page not readable */
#define EX_FAULTW       39      /* page not writable */

#define SAVE_CALLEE_EXCEPTION	((1 << EX_GRADTIMEOUT) | (1<< EX_VECTOR)      |  \
		(1<< EX_BADINST)     | \
                (1<< EX_BREAK)    | (1<< EX_ADDRESS)      |       \
                (1<< EX_SYNC)     | (1<< EX_WATCHPOINT)   |       \
                (1<< EX_REGISTER) | (1<< EX_RESPONSE)     |       \
                (1<< EX_FLOATING) | (1<< EX_UNDEFINED)    |       \
                (1<< EX_SMODIFY)  | (1<< EX_VMODIFY)      |       \
                (1<< EX_NMI)      | (1<< EX_HARDWARE)     |       \
                (1<< EX_NOPAGE)   | (1<< EX_FAULTX)       |       \
                (1<< EX_FAULTR)   | (1<< EX_FAULTW))

#define CR_STATUS_KU	(1 << 3)
#define user_mode(regs) (!((regs)->status & CR_STATUS_KU))

struct cray_minimal_scalar_regs {
        unsigned long   a1_8 [8-1+1];
        unsigned long   orig_a1;
        unsigned int    status;
        unsigned short  fpc, fps;
        unsigned long   pc;
        unsigned long   a63;
};

struct cray_extended_scalar_regs {
        unsigned long   a9_31 [31-9+1];
        unsigned long   a59_61 [61-59+1];
        unsigned long   s1_31 [31-1+1]; /* S0==0 */
};

struct cray_callee_save_scalar_regs {
        unsigned long a32_58 [58-32+1], a62;
        unsigned long s32_63 [63-32+1];
};

// Return getopt style option list
string
regs_opt() 
{ 
	return ""; 
}

// Return standard usage message
string
regs_usage() 
{ 
	return "vaddr_list";
}

static void
regs_showusage()
{
	printf("usage : regs %s\n", regs_usage());
}

// called from typing "help regs" within lcrash
string
regs_help()
{
	return 
	"Display the regs struct in a readable form.";
}

#define STATUS_EXCEPTION_CODE_SHIFT     24
#define STATUS_EXCEPTION_CODE_MASK      0x3f

// this is the main function called via sial within lcrash
// when the user types "regs"
int 
regs()
{
	unsigned long *reg;
	unsigned long status;
	int cnt;
	int i;
	struct cray_minimal_scalar_regs *regs;
	struct cray_extended_scalar_regs *exregs;
	struct cray_callee_save_scalar_regs *csregs;

	cnt = 0;

	if (argc < 2) {
		printf("A regs struct address must be provided.\n");
		regs_showusage();
		return;
	}

	printf("===============================================================================\n");
	while ( ++cnt < argc ) {
		regs = (struct cray_minimal_scalar_regs *)atoi(argv[cnt],16);

		printf("regs: 0x%016lx\n", regs);

		status = 0;
		status = (regs->status >> STATUS_EXCEPTION_CODE_SHIFT) & STATUS_EXCEPTION_CODE_MASK;

		if (status && (status != EX_SYSCALL)) {
			exregs = (struct cray_extended_scalar_regs *)regs - 1;
		} else {
			printf("extended scalar registers unavailable\n");
			exregs = (struct cray_extended_scalar_regs *)0;
		}

		if (exregs && ((1<<status) & SAVE_CALLEE_EXCEPTION)) {
			csregs = (struct cray_callee_save_scalar_regs *)exregs - 1;
		} else {
			printf("callee save scalar registers unavailable\n");
			csregs = (struct cray_callee_save_scalar_regs *)0;
		}

		for (i=1; i<64; i++) {
			if (i>1 && ((i-1)%3 == 0)) {
				printf("\n");
			}

			reg = ((i>=1 && i<=8)          ? &regs->a1_8[i-1] :
                              ((i>=9 && i<=31) && exregs  ? &exregs->a9_31[i-9] :
                              ((i>=32 && i<=58) && csregs  ? &csregs->a32_58[i-32] :
                              ((i>=59 && i<=61) && exregs ? &exregs->a59_61[i-59] :
                              ((i==62) && csregs           ? &csregs->a62 :
                              (i==63                   ? &regs->a63 :
                               (unsigned long *)0))))));

                        if (reg) {
                                printf("a%-2d = 0x%016lx ", i,
                                           ((i==63 && !user_mode(regs)) ?
                                             (unsigned long)reg : *reg));
                        } else {
                                printf("a%-2d =                    ", i);
                        }
                }
		printf("\n");
	printf("===============================================================================\n");
	}


	return 0;
}
